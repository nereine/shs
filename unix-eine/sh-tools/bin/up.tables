#!/usr/bin/env bash
# up is a simple cross-platform shell script for package/system upgrade
# up.tables is a files containing command tables for up

##	Synopsis
#	nameFunction() {
#		typeset -A nameTable
#		nameTable[OS_0]="action for OS_0"
#		nameTable[OS_1]="action for OS_1"	
#
		## Note that OS variable ($OS) is from dotfiles/general/.bash_profile
#		You can get .bash_profile from https://gitlab.com/artnoi-staple/unix
#		
#		cmddesc+="Description for action for selected OS"		
		# Prompt user for confirmation, else exit right away
#		upprompt
#		# Assign command to cmd variable based on OS
#		cmd+="${nameTable[$OS]}"
#	}

# Prompt user for confirmation, else exit right away
upprompt() {
	simyn "Do you want to perform this action: $cmddesc" || exit
}

# The command in this table is used to "update" the package database
upupdate() {
	typeset -A updateTable
	updateTable[desc]="Update package database"
	updateTable[Darwin]="brew update"
	updateTable[OpenBSD]="pkg_add -Uun"
	updateTable[Debian]="apt update"
	updateTable[Arch]="checkupdates"
	updateTable[Void]="xbps-install -Suv"
	updateTable[Redhat]="dnf check-update"
	
	# Assign $cmd and its description
	cmddesc+="${updateTable[desc]}"
	upprompt
	cmd+="${updateTable[$OS]}"
}

# The command in this table is used to "list" outdated packages
uplist() {
	typeset -A uplistTable
	uplistTable[desc]="List outdated packages"
	uplistTable[Darwin]="brew outdated"
	uplistTable[OpenBSD]="pkg_add -Uun"
	uplistTable[Debian]="apt list --upgradeable"
	uplistTable[Arch]="checkupdates"
	uplistTable[Void]=""
	uplistTable[Redhat]="dnf check-update"
	
	# Assign $cmd and its description
	cmddesc+="${uplistTable[desc]}"
	upprompt
	cmd+="${uplistTable[$OS]}"
}

# The commands in this table is used to upgrade the outdated packages
upupgrade() {
	typeset -A upgradeTable
	upgradeTable[desc]="Upgrade packages"
	upgradeTable[Darwin]="brew upgrade"
	upgradeTable[OpenBSD]="pkg_add -Uu"
	upgradeTable[FreeBSD]="pkg update"
	upgradeTable[Debian]="apt upgrade"
	upgradeTable[Arch]="pacman -Syu"
	upgradeTable[Void]="xbps-install -Suv"
	upgradeTable[Redhat]="dnf update"
	
	# Assign $cmd and its description
	cmddesc+="${upgradeTable[desc]}"
	upprompt
	cmd+="${upgradeTable[$OS]}"
}

# The commands in this table is used to upgrade system software
upsys() {
	typeset -A upsysTable
	upsysTable[desc]="Upgrade system software"
	upsysTable[Darwin]="softwareupdate -i -a"
	upsysTable[OpenBSD]="fw_update && syspatch"
	upsysTable[FreeBSD]="freebsd-update fetch install"
	upsysTable[Debian]="apt full-upgrade"
	upsysTable[Arch]="yay -Syu"
	upsysTable[Void]=""
	upsysTable[Redhat]="dnf upgrade --refresh"
	
	# Assign $cmd and its description
	cmddesc+="${upsysTable[desc]}"
	upprompt
	cmd+="${upsysTable[$OS]}"
}

# The commands in this table is used to clean old files from unwanted/outdated packages
upclean() {
	typeset -A cleanTable
	cleanTable[desc]="Clean old package cache and files"
	cleanTable[Darwin]="brew cleanup"
	cleanTable[OpenBSD]="pkg_delete -a"
	cleanTable[FreeBSD]="pkg autoremove ; pkg clean -a"
	cleanTable[Debian]="apt autoremove ; apt autoclean"
	cleanTable[Arch]="yay -Sc"
	cleanTable[Void]="xbps-remove -Oo"
	cleanTable[Redhat]="dnf autoremove ; dnf clean all"
	
	# Assign $cmd and its description
	cmddesc+="${cleanTable[desc]}"
	upprompt
	cmd+="${cleanTable[$OS]}"
}

# Special commands not included in the tables
upspecial() { 
	typeset -A specTable
	
	## Synopsis
	# $put_your_arbitary_logic_here
	# specTable[desc]="Your arbitary special command desciption"
	# specTable[$matching_argument]+='Your arbitary shell command(s)'
	## Example below shows testing $OS==Arch and then put 'yay -Syu' into the table with y as the index or argument
	
	# See https://gitlab.com/artnoi-staple/unix/sh-tools/bin/up-git
	specTable[git]="up-git"
	# Arch Linux yay
	specTable[aur]+='yay -Syu'
	specTable[y]+='yay -Syu'
	
	# Assign $cmd and its description
	cmddesc+="Special command: ${specTable[$1]}"
	upprompt
	cmd+="${specTable[$1]}"
}

# Commands that will be run after $cmd
upafter() {
	if	[[ "$OS" == "Darwin"	]]; then
		simyn "up: Check for Apple updates?"\
		&& softwareupdate -l\
		&& simyn "up: Perform Apple system upgrade from this shell? (Not recommended)"\
		&& softwareupdate -i -a
	elif [[ "$OS" == "Arch" ]]; then
		simyn "Reload-restart systemd services?"\
		&&	systemctl daemon-reload\
		&&	systemctl reset-failed
	fi
}
