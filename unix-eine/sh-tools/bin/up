#!/usr/bin/env bash
# up is a simple cross-platform shell script for package/system upgrade
# up is used in conjunction with the separate up.tables
# up.tables file is used to store the command tables for ease of adding/removing command 
# In addition to up.tables, up also requires extra shell scripts to work
# The up.tables and script files are available from https://gitlab.com/artnoi-staple/unix

## Some sanity checks
# Exit if $OS variable is available from .bash_profile
[[ -z "$OS" ]] && printf "up: could not get OS information from .bash_profile\n" && exit 1

# Sourcing external files - these files should already be in $HOME/bin
fts=(\
	# This file will provide yes/no prompt functionality
	"$HOME/bin/yn.sh"\
	# This file will provide line breaks functionality
	"$HOME/bin/lb.sh"\
)
for f in ${fts[@]};
	do	[[ -f $f ]] && [[ -r $f ]]\
	&& . $f || printf "up: could not source %s\n" "$f"
done

uparg(){
	# Get commands from the tables based on argument
	. "$(command -v up.tables)"

	case "$1" in
		"date")
			upupdate ;;
		"grade")
			upupgrade ;;
		"list")
			uplist ;;
		"sys")
			upsys ;;
		"clean")
			upclean ;;
		# Else run special command
		*)
			upspecial "$1" ;;
	esac
}

upcmd() {
	# upcmd() will generate an array of commands to be run
	typeset -a cmddesc
	typeset -a cmd
	
	# Get commands from the tables based on argument
	uparg "$1"

	# Run commands from the tables
	for c in "${cmd[@]}"; do
		printf "Running command: %s\n" "$c"
		for d in "${cmddesc[@]}"; do
			printf "Description: %s\n" "$d"
			$c;
		done
	done
}

main() {
	# Only run with argument
	if [[ -n "$1" ]]; then
	# Get command list
		upcmd $1
	# Line breaks
		line
	# Run command after
		upafter
	fi
}
main "$1"
